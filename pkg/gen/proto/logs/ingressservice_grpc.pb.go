// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package logs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// IngressServiceClient is the client API for IngressService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IngressServiceClient interface {
	IngressStream(ctx context.Context, opts ...grpc.CallOption) (IngressService_IngressStreamClient, error)
}

type ingressServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIngressServiceClient(cc grpc.ClientConnInterface) IngressServiceClient {
	return &ingressServiceClient{cc}
}

func (c *ingressServiceClient) IngressStream(ctx context.Context, opts ...grpc.CallOption) (IngressService_IngressStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_IngressService_serviceDesc.Streams[0], "/logs.IngressService/IngressStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &ingressServiceIngressStreamClient{stream}
	return x, nil
}

type IngressService_IngressStreamClient interface {
	Send(*IngressBatch) error
	Recv() (*IngressEvent, error)
	grpc.ClientStream
}

type ingressServiceIngressStreamClient struct {
	grpc.ClientStream
}

func (x *ingressServiceIngressStreamClient) Send(m *IngressBatch) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ingressServiceIngressStreamClient) Recv() (*IngressEvent, error) {
	m := new(IngressEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// IngressServiceServer is the server API for IngressService service.
// All implementations must embed UnimplementedIngressServiceServer
// for forward compatibility
type IngressServiceServer interface {
	IngressStream(IngressService_IngressStreamServer) error
	mustEmbedUnimplementedIngressServiceServer()
}

// UnimplementedIngressServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIngressServiceServer struct {
}

func (*UnimplementedIngressServiceServer) IngressStream(IngressService_IngressStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method IngressStream not implemented")
}
func (*UnimplementedIngressServiceServer) mustEmbedUnimplementedIngressServiceServer() {}

func RegisterIngressServiceServer(s *grpc.Server, srv IngressServiceServer) {
	s.RegisterService(&_IngressService_serviceDesc, srv)
}

func _IngressService_IngressStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IngressServiceServer).IngressStream(&ingressServiceIngressStreamServer{stream})
}

type IngressService_IngressStreamServer interface {
	Send(*IngressEvent) error
	Recv() (*IngressBatch, error)
	grpc.ServerStream
}

type ingressServiceIngressStreamServer struct {
	grpc.ServerStream
}

func (x *ingressServiceIngressStreamServer) Send(m *IngressEvent) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ingressServiceIngressStreamServer) Recv() (*IngressBatch, error) {
	m := new(IngressBatch)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _IngressService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "logs.IngressService",
	HandlerType: (*IngressServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "IngressStream",
			Handler:       _IngressService_IngressStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "logs/ingressservice.proto",
}
