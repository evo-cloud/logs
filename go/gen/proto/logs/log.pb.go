// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: logs/log.proto

package logs

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type LogEntry_Level int32

const (
	LogEntry_NONE     LogEntry_Level = 0
	LogEntry_INFO     LogEntry_Level = 1
	LogEntry_WARNING  LogEntry_Level = 2
	LogEntry_ERROR    LogEntry_Level = 3
	LogEntry_CRITICAL LogEntry_Level = 4
	LogEntry_FATAL    LogEntry_Level = 5
)

// Enum value maps for LogEntry_Level.
var (
	LogEntry_Level_name = map[int32]string{
		0: "NONE",
		1: "INFO",
		2: "WARNING",
		3: "ERROR",
		4: "CRITICAL",
		5: "FATAL",
	}
	LogEntry_Level_value = map[string]int32{
		"NONE":     0,
		"INFO":     1,
		"WARNING":  2,
		"ERROR":    3,
		"CRITICAL": 4,
		"FATAL":    5,
	}
)

func (x LogEntry_Level) Enum() *LogEntry_Level {
	p := new(LogEntry_Level)
	*p = x
	return p
}

func (x LogEntry_Level) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogEntry_Level) Descriptor() protoreflect.EnumDescriptor {
	return file_logs_log_proto_enumTypes[0].Descriptor()
}

func (LogEntry_Level) Type() protoreflect.EnumType {
	return &file_logs_log_proto_enumTypes[0]
}

func (x LogEntry_Level) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogEntry_Level.Descriptor instead.
func (LogEntry_Level) EnumDescriptor() ([]byte, []int) {
	return file_logs_log_proto_rawDescGZIP(), []int{0, 0}
}

type Span_Kind int32

const (
	Span_UNSPECIFIED Span_Kind = 0
	Span_INTERNAL    Span_Kind = 1
	Span_SERVER      Span_Kind = 2
	Span_CLIENT      Span_Kind = 3
	Span_PRODUCER    Span_Kind = 4
	Span_CONSUMER    Span_Kind = 5
)

// Enum value maps for Span_Kind.
var (
	Span_Kind_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "INTERNAL",
		2: "SERVER",
		3: "CLIENT",
		4: "PRODUCER",
		5: "CONSUMER",
	}
	Span_Kind_value = map[string]int32{
		"UNSPECIFIED": 0,
		"INTERNAL":    1,
		"SERVER":      2,
		"CLIENT":      3,
		"PRODUCER":    4,
		"CONSUMER":    5,
	}
)

func (x Span_Kind) Enum() *Span_Kind {
	p := new(Span_Kind)
	*p = x
	return p
}

func (x Span_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Span_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_logs_log_proto_enumTypes[1].Descriptor()
}

func (Span_Kind) Type() protoreflect.EnumType {
	return &file_logs_log_proto_enumTypes[1]
}

func (x Span_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Span_Kind.Descriptor instead.
func (Span_Kind) EnumDescriptor() ([]byte, []int) {
	return file_logs_log_proto_rawDescGZIP(), []int{4, 0}
}

type Link_Type int32

const (
	Link_CHILD_OF Link_Type = 0
	Link_FOLLOW   Link_Type = 1
)

// Enum value maps for Link_Type.
var (
	Link_Type_name = map[int32]string{
		0: "CHILD_OF",
		1: "FOLLOW",
	}
	Link_Type_value = map[string]int32{
		"CHILD_OF": 0,
		"FOLLOW":   1,
	}
)

func (x Link_Type) Enum() *Link_Type {
	p := new(Link_Type)
	*p = x
	return p
}

func (x Link_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Link_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_logs_log_proto_enumTypes[2].Descriptor()
}

func (Link_Type) Type() protoreflect.EnumType {
	return &file_logs_log_proto_enumTypes[2]
}

func (x Link_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Link_Type.Descriptor instead.
func (Link_Type) EnumDescriptor() ([]byte, []int) {
	return file_logs_log_proto_rawDescGZIP(), []int{5, 0}
}

type LogEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NanoTs     int64             `protobuf:"varint,1,opt,name=nano_ts,json=nanoTs,proto3" json:"nano_ts,omitempty"`
	Trace      *Trace            `protobuf:"bytes,2,opt,name=trace,proto3" json:"trace,omitempty"`
	Level      LogEntry_Level    `protobuf:"varint,3,opt,name=level,proto3,enum=logs.LogEntry_Level" json:"level,omitempty"`
	Location   string            `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	Message    string            `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	Attributes map[string]*Value `protobuf:"bytes,6,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *LogEntry) Reset() {
	*x = LogEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logs_log_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogEntry) ProtoMessage() {}

func (x *LogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_logs_log_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogEntry.ProtoReflect.Descriptor instead.
func (*LogEntry) Descriptor() ([]byte, []int) {
	return file_logs_log_proto_rawDescGZIP(), []int{0}
}

func (x *LogEntry) GetNanoTs() int64 {
	if x != nil {
		return x.NanoTs
	}
	return 0
}

func (x *LogEntry) GetTrace() *Trace {
	if x != nil {
		return x.Trace
	}
	return nil
}

func (x *LogEntry) GetLevel() LogEntry_Level {
	if x != nil {
		return x.Level
	}
	return LogEntry_NONE
}

func (x *LogEntry) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *LogEntry) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *LogEntry) GetAttributes() map[string]*Value {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type Trace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpanContext *SpanContext `protobuf:"bytes,1,opt,name=span_context,json=spanContext,proto3" json:"span_context,omitempty"`
	// Types that are assignable to Event:
	//	*Trace_SpanStart_
	//	*Trace_SpanEnd_
	Event isTrace_Event `protobuf_oneof:"event"`
}

func (x *Trace) Reset() {
	*x = Trace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logs_log_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trace) ProtoMessage() {}

func (x *Trace) ProtoReflect() protoreflect.Message {
	mi := &file_logs_log_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trace.ProtoReflect.Descriptor instead.
func (*Trace) Descriptor() ([]byte, []int) {
	return file_logs_log_proto_rawDescGZIP(), []int{1}
}

func (x *Trace) GetSpanContext() *SpanContext {
	if x != nil {
		return x.SpanContext
	}
	return nil
}

func (m *Trace) GetEvent() isTrace_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *Trace) GetSpanStart() *Trace_SpanStart {
	if x, ok := x.GetEvent().(*Trace_SpanStart_); ok {
		return x.SpanStart
	}
	return nil
}

func (x *Trace) GetSpanEnd() *Trace_SpanEnd {
	if x, ok := x.GetEvent().(*Trace_SpanEnd_); ok {
		return x.SpanEnd
	}
	return nil
}

type isTrace_Event interface {
	isTrace_Event()
}

type Trace_SpanStart_ struct {
	SpanStart *Trace_SpanStart `protobuf:"bytes,2,opt,name=span_start,json=spanStart,proto3,oneof"`
}

type Trace_SpanEnd_ struct {
	SpanEnd *Trace_SpanEnd `protobuf:"bytes,3,opt,name=span_end,json=spanEnd,proto3,oneof"`
}

func (*Trace_SpanStart_) isTrace_Event() {}

func (*Trace_SpanEnd_) isTrace_Event() {}

type Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*Value_BoolValue
	//	*Value_IntValue
	//	*Value_FloatValue
	//	*Value_DoubleValue
	//	*Value_StrValue
	//	*Value_Json
	//	*Value_Proto
	Value isValue_Value `protobuf_oneof:"value"`
}

func (x *Value) Reset() {
	*x = Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logs_log_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value) ProtoMessage() {}

func (x *Value) ProtoReflect() protoreflect.Message {
	mi := &file_logs_log_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value.ProtoReflect.Descriptor instead.
func (*Value) Descriptor() ([]byte, []int) {
	return file_logs_log_proto_rawDescGZIP(), []int{2}
}

func (m *Value) GetValue() isValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Value) GetBoolValue() bool {
	if x, ok := x.GetValue().(*Value_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (x *Value) GetIntValue() int64 {
	if x, ok := x.GetValue().(*Value_IntValue); ok {
		return x.IntValue
	}
	return 0
}

func (x *Value) GetFloatValue() float32 {
	if x, ok := x.GetValue().(*Value_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

func (x *Value) GetDoubleValue() float64 {
	if x, ok := x.GetValue().(*Value_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (x *Value) GetStrValue() string {
	if x, ok := x.GetValue().(*Value_StrValue); ok {
		return x.StrValue
	}
	return ""
}

func (x *Value) GetJson() string {
	if x, ok := x.GetValue().(*Value_Json); ok {
		return x.Json
	}
	return ""
}

func (x *Value) GetProto() []byte {
	if x, ok := x.GetValue().(*Value_Proto); ok {
		return x.Proto
	}
	return nil
}

type isValue_Value interface {
	isValue_Value()
}

type Value_BoolValue struct {
	BoolValue bool `protobuf:"varint,1,opt,name=bool_value,json=boolValue,proto3,oneof"`
}

type Value_IntValue struct {
	IntValue int64 `protobuf:"varint,2,opt,name=int_value,json=intValue,proto3,oneof"`
}

type Value_FloatValue struct {
	FloatValue float32 `protobuf:"fixed32,3,opt,name=float_value,json=floatValue,proto3,oneof"`
}

type Value_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,4,opt,name=double_value,json=doubleValue,proto3,oneof"`
}

type Value_StrValue struct {
	StrValue string `protobuf:"bytes,5,opt,name=str_value,json=strValue,proto3,oneof"`
}

type Value_Json struct {
	Json string `protobuf:"bytes,6,opt,name=json,proto3,oneof"`
}

type Value_Proto struct {
	Proto []byte `protobuf:"bytes,7,opt,name=proto,proto3,oneof"`
}

func (*Value_BoolValue) isValue_Value() {}

func (*Value_IntValue) isValue_Value() {}

func (*Value_FloatValue) isValue_Value() {}

func (*Value_DoubleValue) isValue_Value() {}

func (*Value_StrValue) isValue_Value() {}

func (*Value_Json) isValue_Value() {}

func (*Value_Proto) isValue_Value() {}

type SpanContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 16-byte (128-bit) trace ID.
	TraceId []byte `protobuf:"bytes,1,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	// 8-byte (64-bit) span ID.
	SpanId uint64 `protobuf:"varint,2,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
}

func (x *SpanContext) Reset() {
	*x = SpanContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logs_log_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpanContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanContext) ProtoMessage() {}

func (x *SpanContext) ProtoReflect() protoreflect.Message {
	mi := &file_logs_log_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanContext.ProtoReflect.Descriptor instead.
func (*SpanContext) Descriptor() ([]byte, []int) {
	return file_logs_log_proto_rawDescGZIP(), []int{3}
}

func (x *SpanContext) GetTraceId() []byte {
	if x != nil {
		return x.TraceId
	}
	return nil
}

func (x *SpanContext) GetSpanId() uint64 {
	if x != nil {
		return x.SpanId
	}
	return 0
}

type Span struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context    *SpanContext      `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Name       string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Kind       Span_Kind         `protobuf:"varint,3,opt,name=kind,proto3,enum=logs.Span_Kind" json:"kind,omitempty"`
	StartNs    int64             `protobuf:"varint,4,opt,name=start_ns,json=startNs,proto3" json:"start_ns,omitempty"`
	Duration   int64             `protobuf:"varint,5,opt,name=duration,proto3" json:"duration,omitempty"`
	Attributes map[string]*Value `protobuf:"bytes,6,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Links      []*Link           `protobuf:"bytes,7,rep,name=links,proto3" json:"links,omitempty"`
	Logs       []*LogEntry       `protobuf:"bytes,8,rep,name=logs,proto3" json:"logs,omitempty"`
}

func (x *Span) Reset() {
	*x = Span{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logs_log_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Span) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Span) ProtoMessage() {}

func (x *Span) ProtoReflect() protoreflect.Message {
	mi := &file_logs_log_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Span.ProtoReflect.Descriptor instead.
func (*Span) Descriptor() ([]byte, []int) {
	return file_logs_log_proto_rawDescGZIP(), []int{4}
}

func (x *Span) GetContext() *SpanContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *Span) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Span) GetKind() Span_Kind {
	if x != nil {
		return x.Kind
	}
	return Span_UNSPECIFIED
}

func (x *Span) GetStartNs() int64 {
	if x != nil {
		return x.StartNs
	}
	return 0
}

func (x *Span) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Span) GetAttributes() map[string]*Value {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *Span) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *Span) GetLogs() []*LogEntry {
	if x != nil {
		return x.Logs
	}
	return nil
}

type Link struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpanContext *SpanContext      `protobuf:"bytes,1,opt,name=span_context,json=spanContext,proto3" json:"span_context,omitempty"`
	Type        Link_Type         `protobuf:"varint,2,opt,name=type,proto3,enum=logs.Link_Type" json:"type,omitempty"`
	Attributes  map[string]*Value `protobuf:"bytes,3,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Link) Reset() {
	*x = Link{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logs_log_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Link) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Link) ProtoMessage() {}

func (x *Link) ProtoReflect() protoreflect.Message {
	mi := &file_logs_log_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Link.ProtoReflect.Descriptor instead.
func (*Link) Descriptor() ([]byte, []int) {
	return file_logs_log_proto_rawDescGZIP(), []int{5}
}

func (x *Link) GetSpanContext() *SpanContext {
	if x != nil {
		return x.SpanContext
	}
	return nil
}

func (x *Link) GetType() Link_Type {
	if x != nil {
		return x.Type
	}
	return Link_CHILD_OF
}

func (x *Link) GetAttributes() map[string]*Value {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type Trace_SpanStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Kind  Span_Kind `protobuf:"varint,2,opt,name=kind,proto3,enum=logs.Span_Kind" json:"kind,omitempty"`
	Links []*Link   `protobuf:"bytes,3,rep,name=links,proto3" json:"links,omitempty"`
}

func (x *Trace_SpanStart) Reset() {
	*x = Trace_SpanStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logs_log_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trace_SpanStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trace_SpanStart) ProtoMessage() {}

func (x *Trace_SpanStart) ProtoReflect() protoreflect.Message {
	mi := &file_logs_log_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trace_SpanStart.ProtoReflect.Descriptor instead.
func (*Trace_SpanStart) Descriptor() ([]byte, []int) {
	return file_logs_log_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Trace_SpanStart) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Trace_SpanStart) GetKind() Span_Kind {
	if x != nil {
		return x.Kind
	}
	return Span_UNSPECIFIED
}

func (x *Trace_SpanStart) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

type Trace_SpanEnd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Trace_SpanEnd) Reset() {
	*x = Trace_SpanEnd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logs_log_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trace_SpanEnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trace_SpanEnd) ProtoMessage() {}

func (x *Trace_SpanEnd) ProtoReflect() protoreflect.Message {
	mi := &file_logs_log_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trace_SpanEnd.ProtoReflect.Descriptor instead.
func (*Trace_SpanEnd) Descriptor() ([]byte, []int) {
	return file_logs_log_proto_rawDescGZIP(), []int{1, 1}
}

var File_logs_log_proto protoreflect.FileDescriptor

var file_logs_log_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x73, 0x2f, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x22, 0x82, 0x03, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x61, 0x6e, 0x6f, 0x5f, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x61, 0x6e, 0x6f, 0x54, 0x73, 0x12, 0x21, 0x0a, 0x05,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x6c, 0x6f,
	0x67, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x12,
	0x2a, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x4c, 0x6f, 0x67,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x1a, 0x4a, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4c, 0x0a,
	0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x41,
	0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x04,
	0x12, 0x09, 0x0a, 0x05, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x05, 0x22, 0xa3, 0x02, 0x0a, 0x05,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6c, 0x6f,
	0x67, 0x73, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0b,
	0x73, 0x70, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x36, 0x0a, 0x0a, 0x73,
	0x70, 0x61, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x61,
	0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x09, 0x73, 0x70, 0x61, 0x6e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x30, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x45, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x07, 0x73, 0x70,
	0x61, 0x6e, 0x45, 0x6e, 0x64, 0x1a, 0x66, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x6e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x53, 0x70, 0x61, 0x6e,
	0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x05, 0x6c,
	0x69, 0x6e, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x6c, 0x6f, 0x67,
	0x73, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x1a, 0x09, 0x0a,
	0x07, 0x53, 0x70, 0x61, 0x6e, 0x45, 0x6e, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x22, 0xe5, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x62,
	0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x09,
	0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x00, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x48, 0x00, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23,
	0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x73, 0x74, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x41, 0x0a, 0x0b, 0x53, 0x70, 0x61,
	0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x70, 0x61, 0x6e, 0x49, 0x64, 0x22, 0xcc, 0x03, 0x0a,
	0x04, 0x53, 0x70, 0x61, 0x6e, 0x12, 0x2b, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x53, 0x70,
	0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x53, 0x70, 0x61, 0x6e,
	0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x4e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x53, 0x70,
	0x61, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x20,
	0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73,
	0x12, 0x22, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04,
	0x6c, 0x6f, 0x67, 0x73, 0x1a, 0x4a, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x59, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45, 0x52, 0x56, 0x45,
	0x52, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12,
	0x0c, 0x0a, 0x08, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x45, 0x52, 0x10, 0x04, 0x12, 0x0c, 0x0a,
	0x08, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45, 0x52, 0x10, 0x05, 0x22, 0x8b, 0x02, 0x0a, 0x04,
	0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x34, 0x0a, 0x0c, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6c, 0x6f, 0x67,
	0x73, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0b, 0x73,
	0x70, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e,
	0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x3a, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x2e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x4a, 0x0a, 0x0f, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x21, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x20, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0c, 0x0a, 0x08, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x5f, 0x4f, 0x46, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x76, 0x6f, 0x2d, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x6c, 0x6f, 0x67, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x6c, 0x6f, 0x67, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_logs_log_proto_rawDescOnce sync.Once
	file_logs_log_proto_rawDescData = file_logs_log_proto_rawDesc
)

func file_logs_log_proto_rawDescGZIP() []byte {
	file_logs_log_proto_rawDescOnce.Do(func() {
		file_logs_log_proto_rawDescData = protoimpl.X.CompressGZIP(file_logs_log_proto_rawDescData)
	})
	return file_logs_log_proto_rawDescData
}

var file_logs_log_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_logs_log_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_logs_log_proto_goTypes = []interface{}{
	(LogEntry_Level)(0),     // 0: logs.LogEntry.Level
	(Span_Kind)(0),          // 1: logs.Span.Kind
	(Link_Type)(0),          // 2: logs.Link.Type
	(*LogEntry)(nil),        // 3: logs.LogEntry
	(*Trace)(nil),           // 4: logs.Trace
	(*Value)(nil),           // 5: logs.Value
	(*SpanContext)(nil),     // 6: logs.SpanContext
	(*Span)(nil),            // 7: logs.Span
	(*Link)(nil),            // 8: logs.Link
	nil,                     // 9: logs.LogEntry.AttributesEntry
	(*Trace_SpanStart)(nil), // 10: logs.Trace.SpanStart
	(*Trace_SpanEnd)(nil),   // 11: logs.Trace.SpanEnd
	nil,                     // 12: logs.Span.AttributesEntry
	nil,                     // 13: logs.Link.AttributesEntry
}
var file_logs_log_proto_depIdxs = []int32{
	4,  // 0: logs.LogEntry.trace:type_name -> logs.Trace
	0,  // 1: logs.LogEntry.level:type_name -> logs.LogEntry.Level
	9,  // 2: logs.LogEntry.attributes:type_name -> logs.LogEntry.AttributesEntry
	6,  // 3: logs.Trace.span_context:type_name -> logs.SpanContext
	10, // 4: logs.Trace.span_start:type_name -> logs.Trace.SpanStart
	11, // 5: logs.Trace.span_end:type_name -> logs.Trace.SpanEnd
	6,  // 6: logs.Span.context:type_name -> logs.SpanContext
	1,  // 7: logs.Span.kind:type_name -> logs.Span.Kind
	12, // 8: logs.Span.attributes:type_name -> logs.Span.AttributesEntry
	8,  // 9: logs.Span.links:type_name -> logs.Link
	3,  // 10: logs.Span.logs:type_name -> logs.LogEntry
	6,  // 11: logs.Link.span_context:type_name -> logs.SpanContext
	2,  // 12: logs.Link.type:type_name -> logs.Link.Type
	13, // 13: logs.Link.attributes:type_name -> logs.Link.AttributesEntry
	5,  // 14: logs.LogEntry.AttributesEntry.value:type_name -> logs.Value
	1,  // 15: logs.Trace.SpanStart.kind:type_name -> logs.Span.Kind
	8,  // 16: logs.Trace.SpanStart.links:type_name -> logs.Link
	5,  // 17: logs.Span.AttributesEntry.value:type_name -> logs.Value
	5,  // 18: logs.Link.AttributesEntry.value:type_name -> logs.Value
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_logs_log_proto_init() }
func file_logs_log_proto_init() {
	if File_logs_log_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_logs_log_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logs_log_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logs_log_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logs_log_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpanContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logs_log_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Span); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logs_log_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Link); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logs_log_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trace_SpanStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logs_log_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trace_SpanEnd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_logs_log_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Trace_SpanStart_)(nil),
		(*Trace_SpanEnd_)(nil),
	}
	file_logs_log_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Value_BoolValue)(nil),
		(*Value_IntValue)(nil),
		(*Value_FloatValue)(nil),
		(*Value_DoubleValue)(nil),
		(*Value_StrValue)(nil),
		(*Value_Json)(nil),
		(*Value_Proto)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_logs_log_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_logs_log_proto_goTypes,
		DependencyIndexes: file_logs_log_proto_depIdxs,
		EnumInfos:         file_logs_log_proto_enumTypes,
		MessageInfos:      file_logs_log_proto_msgTypes,
	}.Build()
	File_logs_log_proto = out.File
	file_logs_log_proto_rawDesc = nil
	file_logs_log_proto_goTypes = nil
	file_logs_log_proto_depIdxs = nil
}
